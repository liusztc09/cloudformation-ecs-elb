{
    "Description": "Containerize Flask App in ECS with ASG and ELB",

    "Parameters": {
        "VPC": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "The VPC that needs provisioning"
        },
        "Subnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "The subnets that the load balancer will cover",
        },
        "KeyName": {
            "Type": "String",
            "Description": "Name of an AWS keypair to use on instances"
        },

        "FlaskMemoryAllocation": {
          "Type": "String",
          "Description": "The amount of memory to allocate to the Flask container",
          "Default": 200
        },
        "FlaskCpuUnits": {
          "Type": "String",
          "Description": "How many CPU units to allocate to the Flask container",
          "Default": 300
        },
        "FlaskInstanceType": {
          "Type": "String",
          "Description": "The EC2 instance type to build",
          "Default": "t2.medium"
        },

        "IncomingHttpCidr": {
          "Type": "String",
          "Description": "A CIDR range to restrict incoming HTTP to the load balancer",
          "Default": "0.0.0.0/0"
        }
    },

    "Mappings" : {
        "AWSRegionToAMI" : {
            "us-east-1":      {"AMIID": "ami-3d55272a"},
            "us-west-1":      {"AMIID": "ami-444d0224"},
            "us-west-2":      {"AMIID": "ami-1ccd1f7c"},
            "eu-west-1":      {"AMIID": "ami-b6760fc5"},
            "ap-northeast-1": {"AMIID": "ami-096cba68"},
            "ap-southeast-2": {"AMIID": "ami-22a49541"},
            "ap-southeast-1": {"AMIID": "ami-7934ee1a"},
            "eu-central-1":   {"AMIID": "ami-f562909a"}
        }
    },

    "Resources": {
        "Cluster": {
            "Type": "AWS::ECS::Cluster"
        },

        "TaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Name": "flask-container",
                    "Essential": true,
                    "Image": "slacksec/docker-flask",
                    "Memory": {"Ref": "FlaskMemoryAllocation"},
                    "Cpu": {"Ref": "FlaskCpuUnits"},
                    "PortMappings": [{
                        "HostPort": 80,
                        "ContainerPort": 5000
                    }]
                }]
            }
        },

        "LoadBalancerSecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Security associated to the Flask load balancer",
                "VpcId": {"Ref": "VPC"},
                "SecurityGroupIngress": [
                    {
                        "FromPort": 80,
                        "ToPort": 80,
                        "IpProtocol": "tcp",
                        "CidrIp": {"Ref": "IncomingHttpCidr"}
                    }
                ],
                "Tags": [
                    {"Key": "Name", "Value": "flask-loadbalancer-sg"}
                ]
            }
        },

        "InstanceSecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Only allow traffic via the Flask load balancer",
                "SecurityGroupIngress": [
                    {
                       "FromPort": 80,
                       "IpProtocol": "tcp",
                       "SourceSecurityGroupId": {"Ref": "LoadBalancerSecurityGroup"},
                       "ToPort": 80
                   }
                ],
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {"Key": "Name", "Value": "flask-instance-sg"}
                ]
            }
        },

        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["ec2.amazonaws.com"]
                            },
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "flask-ecs-instance-role",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "ecr:GetAuthorizationToken",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },

        "ServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["ecs.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Policies": [
                    {
                        "PolicyName": "flask-ecs-service-role",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                                ],
                                "Resource": "*"
                            }]
                        }
                    }
                ]
            }
        },

        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{"Ref": "InstanceRole"}]
            }
        },

        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "Subnets": {"Ref": "Subnets"},
                "Listeners": [{
                    "InstancePort": "80",
                    "InstanceProtocol": "HTTP",
                    "LoadBalancerPort": "80",
                    "Protocol": "HTTP"
                }],
                "SecurityGroups": [
                    {"Ref": "LoadBalancerSecurityGroup"}
                ],
                "Tags": [
                    {"Key": "Name", "Value": "flask-loadbalancer"}
                ]
            }
        },

        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands" : {
                            "01_add_instance_to_cluster" : {
                                "command": {"Fn::Join": ["", [
                                    "#!/bin/bash\n",
                                    "echo ECS_CLUSTER=", {"Ref": "Cluster"}, " >> /etc/ecs/ecs.config"
                                ]]}
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[main]\n",
                                    "stack=", {"Ref": "AWS::StackId" }, "\n",
                                    "region=", {"Ref": "AWS::Region" }, "\n"
                                ]]},
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {"Fn::Join" :["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ", {"Ref": "AWS::StackName"},
                                    "         --resource LaunchConfiguration ",
                                    "         --region ", {"Ref": "AWS::Region"}, "\n",
                                    "runas=root\n"
                                ]]}
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "AssociatePublicIpAddress": true,
                "IamInstanceProfile": {"Ref": "InstanceProfile"},
                "ImageId": {"Fn::FindInMap": ["AWSRegionToAMI", {"Ref" : "AWS::Region"}, "AMIID"]},
                "InstanceType": {"Ref": "FlaskInstanceType"},
                "KeyName": {"Ref": "KeyName"},
                "SecurityGroups": [
                    {"Ref": "InstanceSecurityGroup"}
                ],
                "UserData": {"Fn::Base64": {"Fn::Join": ["", [
                     "#!/bin/bash -xe\n",
                     "yum install -y aws-cfn-bootstrap\n",

                     "/opt/aws/bin/cfn-init -v ",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource LaunchConfiguration ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n",

                     "/opt/aws/bin/cfn-signal -e $? ",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource AutoScalingGroup ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}}
            }
        },

        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "DesiredCapacity": "1",
                "MaxSize": "1",
                "MinSize": "1",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {"Ref": "LaunchConfiguration"},
                "VPCZoneIdentifier": {"Ref": "Subnets"},
                "Tags": [
                    {"Key": "Name", "Value": "flask-asg", "PropagateAtLaunch": true}
                ]
            },
            "CreationPolicy": {
              "ResourceSignal": {
                "Count": "1",
                "Timeout": "PT5M"
              }
            }
        },

        "Service": {
            "Type": "AWS::ECS::Service",
            "DependsOn": ["AutoScalingGroup"],
            "Properties": {
                "Cluster": {"Ref": "Cluster"},
                "DesiredCount": 1,
                "LoadBalancers": [{
                    "ContainerName": "flask-container",
                    "ContainerPort": "5000",
                    "LoadBalancerName" : {"Ref": "LoadBalancer"}
                }],
                "Role": {"Ref": "ServiceRole"},
                "TaskDefinition": {"Ref": "TaskDefinition"}
            }
        }
    },

    "Outputs": {
        "OAuthEndpoint": {
            "Value": {"Fn::Join": ["", [
                "http://", {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
            ]]}
        }
    }
}